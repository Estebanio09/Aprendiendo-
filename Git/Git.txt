Lo primero descargar Git desde sitio oficial 
https://git-scm.com/downloads/win

git config = para acceder a la configuración de Git
git config --global = para acceder a la configuración global 
git config --system = para acceder a la configuración de system 
git config --local = para acceder a la configuración local 
git config --global user.name "NOMBRE DE USUARIO" = acceder al nombre del usuario 
git config --global user.email "email@ejemplo.com" = acceder al correo del usuario
git config --list = para ver todas las configuración de git 
git config --global --list = para ver la configuración global 
git config --global core.editor "code --wait" = para difinir VS code como editor
    --wait = reservar el cambio hasta que se cierre el editor 
git config --global color.iu true = definir color para la terminal
git config --global core.autocrlf = es le carro de retorno corregir erro de compatibilidad de \r 

    Crear un repositorio 

Que es un repositorio es un espacio donde almacenamos toda la información el espacio de trabajo es nuestro apartado local 

Areas de trabajo:
local = no es el repo es nuestro espacio de trabajo 
Staging area = donde subimos los cambios antes de llegar la repositorio es un punto medio // los archivos en local son modyfile // preparado para subirse 
repositorio = es el código en la nube // un archivo en la nove es un nombre archivo Staging

para movernos en consola 
cd = para avanzar 
cd .. = para retroceder 
mkdir NombreCarpeta = crear directorio// carpeta 
rmdir = remover el directorio // borrar 
git init = para inicializar git // solo se pueden ver en oculto 
ls = para listar los archivos 
pwd = ver la ruta donde esta 
ls -a = para ver los archivo ocultos son los que empiezan en . ejemplo .git

Subir archivos al area de preparación/Staging 
git add . = para subir todos los archivos 
git add NombreArchivo = para subir un archivo
git status = muestra información del area de preparación/Staging
git rm --cached NombreArchivo = para eliminar archivos del area de preparación 

Subir archivos del area de preparación/Staging al repositorio 
git commit -m "Descripción de los archivos como comentarios"
git commit = abre un apartado en VS code para agregar la Descripción

Subir de local a repositorio evitando el area de preparación/Staging
git commit "comentario" -a = salta el commit y guarda en el repo 

                    Restore, checkout y más 

Eliminar archivos de git 
rm NombreArchivo = elimina el archivo en local ahora debemos realizar un commit para eliminar la info del area de preparación así eliminamos archivos del area de preparación y con un commit se elimina del repo 

Restaurar archivos 
git restore NombreArchivo = se restaura en el area de preparación ya que hay se subió no existe en local 

Volver atrás en cambios 
git checkout NombreArchivo = vuelve atrás al ultimo cambio que se realizo con un commit la ultima vez que se agrego al area de preparación/Staging

Deshacer cambios en el area de preparación después de un commit 
git reset --hard = descarta los cambios en repo y en el area de preparación/Staging 

Cambiar nombre de un archivo 
git mv NombreArchivo NombreNuevoArchivo

Git Status 
git status --short = muestran el estatus pero de forma un poco mas clara 
git status -s = muestran el estatus pero de forma un poco mas clara
    M = modificado 
    A = archivo nuevo 

            gti diff   diferencia entre versiones 

git show nombre_de_archivo.eje  = con este vemos los cambios del archivo en el area de preparación
git log    muestra el identificador del commit 
fit log --oneline   muestra una version reducida de los primeros 7 dígitos
cambiar la cantidad de dígitos 
git config --global core.abbrev {cantidad de dígitos sin llaves} para modificar la cantidad de caracteres del los logs reducidos 

ya con los logs reducidos podemos buscar diferencias entre los commits 
muestran diferencias entre dos commits, pero varían en el tipo de detalle que ofrecen. Aquí te explico cada uno:

git diff #commit #commit 
Muestra las diferencias completas entre dos commits, incluyendo todas las líneas agregadas, eliminadas o modificadas. Este comando es útil para ver cambios detallados y contextuales de todo el contenido que ha cambiado entre los commits especificados.

git diff --name-only #commit #commit 
Lista solo los nombres de los archivos que han cambiado entre los dos commits, sin mostrar el contenido de los cambios. Es útil si quieres un resumen rápido para identificar qué archivos han sido modificados, sin ver las modificaciones específicas.

git diff --word-diff #commit #commit
Muestra las diferencias entre los dos commits con un enfoque en cambios a nivel de palabra dentro de las líneas modificadas, en lugar de mostrar líneas completas como en el primer comando. Esto es útil cuando quieres ver con precisión cómo cambió el texto o código dentro de una línea.


Modificar y deshacer un commit 

modificar un commit existente 
git commit --amend  = se abre una ventana en donde podemos modificar el nombres del archivo y al cerrar todo lo que subimos en el ultimo commit se reemplaza 

modificar commits anteriores no es recomendable ya que es como borrar todo el código nuevo y volver a una version anterior 
git rebase -i head~{numero de commits a los que regresar}  nos despliega una ventana con los commits veras que los commits inician por pick ese lo reemplazas por edit dependiendo al commit que quieres volver 

Deshacer el ultimo commit 
git reset --soft {numero de commit}   vuelve al commit indicado y borra los anteriores  




